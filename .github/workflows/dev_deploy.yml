name: PLANTORY DEV CI/CD

on:
  push:
    branches: [ develop ]

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/plantory
  IMAGE_TAG: ${{ github.sha }} # Ïª§Î∞ã SHA Î∂àÎ≥Ä ÌÉúÍ∑∏

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker image (no cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_REPO,IMAGE_TAG
          script: |
            set -euo pipefail

            echo "üîê DockerHub login"
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "üßπ Remove old container if exists"
            if docker ps -a --format '{{.Names}}' | grep -q '^plantory-app$'; then
              docker rm -f plantory-app || true
            fi

            echo "üì¶ Pull exact image tag: ${IMAGE_REPO}:${IMAGE_TAG}"
            docker pull "${IMAGE_REPO}:${IMAGE_TAG}"

            echo "üöÄ Run container"
            docker run -d \
              --name plantory-app \
              --restart unless-stopped \
              -p 8080:8080 \
              -e JAVA_TOOL_OPTIONS="-Duser.timezone=Asia/Seoul" \
              "${IMAGE_REPO}:${IMAGE_TAG}"

            echo "üßΩ Prune dangling images"
            docker image prune -f

            echo "‚úÖ Deployed ${IMAGE_REPO}:${IMAGE_TAG}"
